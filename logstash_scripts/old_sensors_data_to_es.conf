#Input stanza
input {

 file{
   path => "/root/project/cpfoods/datagen/oldData/cpf_fridge_id_*.txt"
   start_position => "beginning"
   sincedb_path => "/dev/null"
         }
}

#Filter stanza
filter{
  grok{
     match => { "message" => ".*TS;%{NUMBER:ts};InTemp;%{NUMBER:Internal_Temperature};AmTemp;%{NUMBER:External_Temperature};Load;%{NUMBER:Weight};Status;%{WORD:Status};board_id;%{NUMBER:Board_id};fridge_id;%{NUMBER:Fridge_id};latitude;%{NUMBER:Latitude};longitude;%{NUMBER:Longitude}.*"}
  }

  mutate {
    convert => {
      Internal_Temperature => "float"
      External_Temperature => "float"
      Weight => "float"
      Fridge_id => "integer"
      Board_id => "float"
      Latitude => "float"
      Longitude => "float"
    }
  }

  date {
    match => [ "ts", "YYYYMMddHHmmss" ]
    target => "event_date"
  } 

  #Logic to define regions based on logitude and latitude values

  if [Latitude] >= 17.573338989506368 {
    mutate { add_field => [Region, "North"] }
  } else if [Latitude] <= 14.115267411122709 {
    mutate { add_field => [Region, "South"] }
  } else if [Longitude] >= 102.140137{
    mutate { add_field => [Region, "East"] }
  } else if [Longitude] <= 99.613037 {
    mutate { add_field => [Region, "West"] }
  } else {
    mutate { add_field => [Region, "Central"] }
  }

  #Depending on current internal temperature, add OK, Warning, Critical
  range {
    ranges => [ "Internal_Temperature",-20,0,"field:TemperatureStatus:OK",
              "Internal_Temperature",1,10,"field:TemperatureStatus:Warning",
              "Internal_Temperature",11,100,"field:TemperatureStatus:Critical" ]
  }

  mutate {
    add_field => [ Coordinates, "%{Latitude}, %{Longitude}" ]
  }

 
  #Depending on load in the fridge, OK, Warning, Critical
  range {
    ranges => [ "Weight",0,50,"field:WeightStatus:Critical",
              "Weight",51,100,"field:WeightStatus:Warning",
              "Weight",101,500,"field:WeightStatus:OK" ]
  }

  #Filter to call compare distance between cordinates
  #ruby {
  #     code =>'require "open3"
  #             fridge_id = event.get("Fridge_id")
  #             latitude  = event.get("Latitude")
  #             longitude = event.get("Longitude")
  #             cmd = "/usr/bin/python /root/project/cpfoods/alerts/compare_location.py #{fridge_id} #{latitude} #{longitude}" 
  #             stdin, stdout, stderr = Open3.popen3(cmd)
  #             output=stdout.read
  #             event.set("command_results",output)'
  #             #err=stderr.read
  #             #if ! err.to_s.empty?
  #             #event.set("Error_Script",err) '
  #     }
 
  #Include the data from command into events
  #if [command_results] =~ /.+/ {
  #  json {
  #        source => "command_results"
  #        remove_field => [ "command_results" ]
  #  }
  #}
  #
  #Added the following fields to avoid running ruby code
  mutate {
    add_field => [ Distance, "0.0"]
    add_field => [ Last_Location, "%{Coordinates}"]
    add_field => [ PowerStatus, "ON"]
  }
  
  if [Distance]{
    mutate { convert => {Distance => "float" }}
  }

  if [Distance] > 100 {
    mutate { add_field => [LocationStatus, "Critical"] }
  } else {
    mutate { add_field => [LocationStatus, "OK"] }
  }

  #Ruby filter to get power off status
  #ruby {
  #     code =>'require "open3"
  #             fridge_id = event.get("Fridge_id")
  #             temp = event.get("Internal_Temperature")
  #             cmd = "/usr/bin/python /root/project/cpfoods/alerts/get_temperature.py #{fridge_id} #{temp}" 
  #             stdin, stdout, stderr = Open3.popen3(cmd)
  #             output=stdout.read
  #             event.set("command_results",output)'
  #             #err=stderr.read
  #             #if ! err.to_s.empty?
  #             #event.set("Error_Script",err) '
  #     }
 
  #Include the data from command into events
  #if [command_results] =~ /.+/ {
  #  json {
  #        source => "command_results"
  #        remove_field => [ "command_results" ]
  #  }
  #}

  #If any  one of the status is critical, make overall status as Critical
  if [TemperatureStatus] == "Critical" or [WeightStatus] == "Critical" or [LocationStatus] == "Critical" or [PowerStatus] == "Off" {
    mutate{
      replace => { "Status" => "Critical" }
    }
  } else if [TemperatureStatus] == "Warning" or [WeightStatus] == "Warning" {
    mutate{
      replace => { "Status" => "Warning" }
    }
  } else {
    mutate{
      replace => { "Status" => "OK" }
    }
  }
  
}
#End of filter


#Output stanza
output {

  stdout { codec => rubydebug }
  #file { path => "/root/project/cpfoods/datagen/oldData/jsonData/cpf_fridge_5_data.json" }

  elasticsearch {
      document_type => "sensorlogs"
      hosts => ["10.85.238.34:9200"]
      index => "cpf_sensor_data"
      manage_template => false
  }
}

#End of file


