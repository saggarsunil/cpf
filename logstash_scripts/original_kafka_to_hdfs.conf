#Input stanza
input {

  kafka{
  topics => ["/sensor-stream:sensor-data"]
  group_id => "test"
  }

}

#Filter stanza
filter{
  grok{
     match => { "message" => "%{TIMESTAMP_ISO8601:logstash_timestamp}.*TS;%{NUMBER:ts};InTemp;%{NUMBER:internal_temperature};AmTemp;%{NUMBER:external_temperature};Load;%{NUMBER:weight};Status;%{WORD:status};board_id;%{NUMBER:board_id};fridge_id;%{NUMBER:fridge_id};latitude;%{NUMBER:latitude};longitude;%{NUMBER:longitude}.*"}
  }

  mutate {
    convert => {
      internal_temperature => "float"
      external_temperature => "float"
      weight => "float"
      fridge_id => "integer"
      board_id => "float"
      latitude => "float"
      longitude => "float"
    }
  }

  date {
    match => [ "ts", "YYYYMMddHHmmss" ]
    target => "event_date"
  } 

  #Logic to define regions based on logitude and latitude values

  if [latitude] >= 17.573338989506368 {
    mutate { add_field => [region, "North"] }
  } else if [latitude] <= 14.115267411122709 {
    mutate { add_field => [region, "South"] }
  } else if [longitude] >= 102.140137{
    mutate { add_field => [region, "East"] }
  } else if [longitude] <= 99.613037 {
    mutate { add_field => [region, "West"] }
  } else {
    mutate { add_field => [region, "Central"] }
  }

  #Depending on current internal temperature, add OK, Warning, Critical
  range {
    ranges => [ "internal_temperature",-4,0,"field:temperaturestatus:OK",
              "internal_temperature",1,10,"field:temperaturestatus:Warning",
              "internal_temperature",11,100,"field:temperaturestatus:Critical" ]
  }

  mutate {
    add_field => [ coordinates, "%{latitude}, %{longitude}" ]
  }

 
  #Depending on load in the fridge, OK, Warning, Critical
  range {
    ranges => [ "weight",51,1000,"field:weightstatus:OK",
              "weight",11,50,"field:weightstatus:Warning",
              "weight",0,10,"field:weightstatus:Critical" ]
  }

  #Filter to call compare distance between cordinates
  ruby {
       code =>'require "open3"
               fridge_id = event.get("fridge_id")
               latitude  = event.get("latitude")
               longitude = event.get("longitude")
               cmd = "/usr/bin/python /root/project/cpfoods/alerts/compare_location.py #{fridge_id} #{latitude} #{longitude}" 
               stdin, stdout, stderr = Open3.popen3(cmd)
               output=stdout.read
               event.set("command_results",output)'
               #err=stderr.read
               #if ! err.to_s.empty?
               #event.set("Error_Script",err) '
       }
 
  #Include the data from command into events
  if [command_results] =~ /.+/ {
    json {
          source => "command_results"
          remove_field => [ "command_results" ]
    }
  }
  
  if [distance]{
    mutate { convert => {distance => "float" }}
  }

  if [distance] > 100 {
    mutate { add_field => [locationstatus, "Critical"] }
  } else {
    mutate { add_field => [locationstatus, "OK"] }
  }

  #Ruby filter to get power off status
  ruby {
       code =>'require "open3"
               fridge_id = event.get("fridge_id")
               temp = event.get("internal_temperature")
               cmd = "/usr/bin/python /root/project/cpfoods/alerts/get_temperature.py #{fridge_id} #{temp}" 
               stdin, stdout, stderr = Open3.popen3(cmd)
               output=stdout.read
               event.set("command_results",output)'
               #err=stderr.read
               #if ! err.to_s.empty?
               #event.set("Error_Script",err) '
       }
 
  #Include the data from command into events
  if [command_results] =~ /.+/ {
    json {
          source => "command_results"
          remove_field => [ "command_results" ]
    }
  }

  #If any  one of the status is critical, make overall status as Critical
  if [temperaturestatus] == "Critical" or [weightstatus] == "Critical" or [locationstatus] == "Critical" or [powerstatus] == "Off" {
    mutate{
      replace => { "status" => "Critical" }
    }
  } else if [temperaturestatus] == "Warning" or [weightstatus] == "Warning" {
    mutate{
      replace => { "status" => "Warning" }
    }
  } else {
    mutate{
      replace => { "status" => "OK" }
    }
  }
  #remove @version and @timestamp
  mutate {
  remove_field => ["@version","@timestamp","message"]
  
  }
  #drop {
  #  remove_field => [ "@timestamp", "@version" ]
  #}
}
#End of filter


#Output stanza
output {

  stdout{ codec => rubydebug }
#  file { path => "/mapr/my.cluster.com/hive/cpfoods.json" }

}

#End of file


